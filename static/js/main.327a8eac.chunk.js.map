{"version":3,"sources":["Components/UI/atoms/Input.js","Components/UI/atoms/Button.js","AnimeContext.js","Components/UI/molecules/InputAndButton.js","Components/UI/Organisms/Header.js","Components/UI/atoms/Text.js","Components/UI/Organisms/Details.js","Components/UI/atoms/Thumbnail.js","Components/UI/molecules/Card.js","Components/UI/Organisms/Cards.js","Components/UI/Organisms/Main.js","Components/templates/App.js","serviceWorker.js","index.js"],"names":["inputStyles","margin","borderRadius","border","padding","fontSize","Input","state","animeTitle","handleChange","bind","event","value","this","setState","type","props","style","placeholder","onChange","React","Component","StyledButton","styled","button","Button","onClick","buttonText","AnimeContext","createContext","StyledForm","form","Form","useContext","setAnime","useState","searchedAnime","setSearchedAnime","key","e","currentTarget","preventDefault","StyledHeader","header","Header","Text","p","CardTitle","ResultText","AnimeLink","a","href","link","heading","StyledDetails","div","titleStyle","textAlign","fontWeight","Details","console","log","src","location","img","alt","title","className","episodes","rated","score","synopsis","Thumbnail","Image","imageSource","StyledCard","Card","anime","to","cardTitle","animeUrl","CardGrid","Cards","animeName","urli","setUrl","arrayOfCards","setCardsDisplayed","useEffect","fetch","response","json","data","results","map","animeObject","mal_id","image_url","url","fetchData","path","Main","App","animeHook","Provider","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.327a8eac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst inputStyles = {\r\n    margin: \"0 0.5rem 0 0\",\r\n    borderRadius: \"6px\",\r\n    border: \"0\",\r\n    \r\n    padding: \"1rem 1.5rem\",\r\n    fontSize: \"120%\"\r\n}\r\n\r\nclass Input extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            animeTitle: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { value } = event;\r\n        this.setState({ animeTitle: value });\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n    render(){\r\n        \r\n        \r\n        return (\r\n            <input type={this.props.type} style={inputStyles} placeholder={this.props.placeholder ? this.props.placeholder : \"\"} value={this.props.value} onChange={this.props.onChange} />\r\n        );\r\n    }\r\n        \r\n    \r\n\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst StyledButton = styled.button`\r\n        padding: 1rem;\r\n        background: #5262F2;\r\n        border-radius: 6px;\r\n        color: white;\r\n        border:0;\r\n        box-shadow: 6px 6px 10px #BEBEBE;\r\n        cursor: pointer;\r\n        transition: background-color 1s;\r\n\r\n        :hover{\r\n            background-color: #061FFB ;\r\n        }\r\n    `;\r\nfunction Button(props){\r\n    \r\n    return(\r\n    <StyledButton onClick = {props.onClick}>{props.buttonText}</StyledButton>\r\n    );\r\n}\r\n\r\nexport default Button;","import {createContext} from \"react\";\r\n\r\nconst AnimeContext  = createContext([\"\", () => {}]);\r\n\r\nexport default AnimeContext;","import React, { useContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Input from \"./../atoms/Input\";\r\nimport Button from \"./../atoms/Button\";\r\nimport AnimeContext from \"./../../../AnimeContext\";\r\nconst StyledForm = styled.form`\r\n        display: flex;\r\n        justify-content: center;\r\n        padding:0 2rem;\r\n        margin: 0 auto;\r\n        input{\r\n            flex: 3.5;\r\n        }\r\n        button{\r\n            flex: 1;\r\n        }\r\n        @media (min-width: 800px){\r\n            width: 65%;\r\n        }\r\n\r\n        @media (max-width: 500px){\r\n            input{\r\n                width: 45%;\r\n\r\n            }\r\n            button{\r\n                flex:1;\r\n            }\r\n        }\r\n\r\n        \r\n    `;\r\nfunction Form() {\r\n\r\n    const [anime, setAnime] = useContext(AnimeContext);\r\n    const [searchedAnime, setSearchedAnime] = useState(\"\");\r\n    return (\r\n        <StyledForm key=\"1\">\r\n            <Input type=\"text\" placeholder=\"Search anime\" value={searchedAnime} onChange={e => setSearchedAnime(e.currentTarget.value)} />\r\n            <Button buttonText=\"Search\" onClick={(e) => {\r\n                e.preventDefault();\r\n                setAnime(searchedAnime);\r\n            }}></Button>\r\n        </StyledForm>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Form from \"./../molecules/InputAndButton\";\r\nconst StyledHeader = styled.header`\r\n        background-color: #C2C2C2;\r\n        padding: 1.5rem 0;\r\n    `;\r\n    \r\nfunction Header(){\r\n    \r\n    return(\r\n        <StyledHeader>\r\n            <Form />\r\n        </StyledHeader>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Text(props) {\r\n    const Text = styled.p`\r\n        text-align: center\r\n    `;\r\n\r\n    const CardTitle = styled(Text)`\r\n    \r\n        color: #333;\r\n        text-decoration: none;\r\n\r\n        \r\n    `;\r\n    const ResultText = styled(Text)`\r\n        font-size: 150%;\r\n        text-align: center;\r\n        font-weight: bold;\r\n\r\n        @media (max-width: 768px){\r\n            padding: 0 1rem;\r\n        }\r\n    `;\r\n\r\n    const AnimeLink = styled.a`\r\n            display: block;\r\n            color: blue;\r\n            text-decoration: none;\r\n            text-align: center;\r\n    `;\r\n\r\n    if (props.type === \"CardTitle\") {\r\n        return (\r\n            <CardTitle>{props.value}</CardTitle>\r\n        );\r\n    }\r\n    else if (props.type === \"resultText\") {\r\n        return (\r\n            <ResultText>{props.value}</ResultText>\r\n        );\r\n    }\r\n    else if (props.type === \"AnimeLink\") {\r\n        return (\r\n            <AnimeLink href={props.link}>{props.value}</AnimeLink>\r\n        );\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <Text><strong>{props.heading}</strong> {props.value}</Text>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Text;","import React from \"react\";\r\n\r\nimport Text from \"./../atoms/Text\";\r\nimport styled from \"styled-components\";\r\nconst StyledDetails = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 60%;\r\n    margin: 0 auto;\r\n    padding:  3rem 0;\r\n    flex-direction: column;\r\n\r\n    img{\r\n\r\n    }\r\n    p{\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    @media (max-width: 470px){\r\n        p{\r\n            align-self: flex-start;\r\n        }\r\n        width: 70%;\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst titleStyle = {\r\n    fontSize: \"110%\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\"\r\n}\r\nconst Details = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <StyledDetails>\r\n            \r\n                <img src={props.location.state.img} alt=\"\" />\r\n                <h2 style = {titleStyle}>{props.location.state.title}</h2>\r\n                <Text heading = \"Type:\" value={`${props.location.state.type}`}></Text>\r\n                <Text className = \"non-title\" heading = \"Episodes:\" value={`${props.location.state.episodes}`}></Text>\r\n                <Text className = \"non-title\" heading = \"Rated:\" value={`${props.location.state.rated}`}></Text>\r\n                <Text className = \"non-title\" heading = \"Score:\" value={`${props.location.state.score}`}></Text>\r\n\r\n                <p><strong>Synopsis:</strong><br/>{`${props.location.state.synopsis}`} <a href={props.location.state.link}>Read more.</a></p>\r\n            \r\n\r\n        </StyledDetails>\r\n    );\r\n}\r\n\r\n\r\nexport default Details;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nfunction Thumbnail(props){\r\n\r\n    const Image = styled.img`\r\n        height: auto;\r\n        display: block;\r\n        width: 100%;\r\n        border-top-right-radius: 16px;\r\n        border-top-left-radius: 16px;\r\n\r\n    `;\r\n    return(\r\n        <div>\r\n            <Image src={props.imageSource} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnail;","import styled from \"styled-components\";\r\nimport {  Link } from \"@reach/router\";\r\nimport React, { useContext } from \"react\";\r\nimport AnimeContext from \"./../../../AnimeContext\";\r\nimport Text from \"./../atoms/Text\";\r\nimport Thumbnail from \"./../atoms/Thumbnail\";\r\nconst StyledCard = styled.div`\r\n        box-shadow: 8px 8px 20px rgba(0, 0, 0, 0.17);\r\n        border-radius: 16px;\r\n        width: 60%;\r\n        margin: 1rem auto;\r\n        padding-bottom: 0.5rem;\r\n        transition: box-shadow 1s, transform 0.5s;\r\n\r\n        :hover{\r\n            box-shadow: 15px 15px 25px rgba(0, 0, 0, 0.3);\r\n            transform: translatey(-25px);\r\n        }\r\n\r\n        a{\r\n            text-decoration: none;\r\n        }\r\n        \r\n        \r\n    `;\r\n\r\n\r\nfunction Card(props) {\r\n    const [anime] = useContext(AnimeContext);\r\n\r\n\r\n\r\n    return (\r\n        <StyledCard>\r\n            <Link to={`/details/${anime}`} state = {{\r\n                title: props.cardTitle,\r\n                img: props.img,\r\n                synopsis:props.synopsis,\r\n                episodes: props.episodes,\r\n                link: props.animeUrl,\r\n                type: props.type,\r\n                rated: props.rated,\r\n                score: props.score\r\n\r\n            }} >\r\n                <Thumbnail imageSource={props.img} />\r\n                <Text type=\"CardTitle\" value={props.cardTitle} />\r\n            </Link>\r\n        </StyledCard>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Text from \"./../atoms/Text\";\r\nimport AnimeContext from \"./../../../AnimeContext\";\r\nimport styled from \"styled-components\";\r\nimport Card from \"./../molecules/Card\";\r\n\r\n\r\nconst CardGrid = styled.div`\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n        @media (max-width: 768px){\r\n            grid-template-columns: 1fr;\r\n        }\r\n    `;\r\n\r\nfunction Cards() {\r\n    const [animeName] = useContext(AnimeContext);\r\n    const [urli, setUrl] = useState(\"\");\r\n\r\n    const [arrayOfCards, setCardsDisplayed] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setUrl(`https://api.jikan.moe/v3/search/anime?q=${animeName}&limit=12`);\r\n            let response = await fetch(urli);\r\n            let data = await response.json();\r\n            let results = await data.results;\r\n            \r\n\r\n            setCardsDisplayed(results.map(\r\n                animeObject => <Card\r\n                    key={animeObject.mal_id}\r\n                    cardTitle={animeObject.title}\r\n                    img={animeObject.image_url}\r\n                    synopsis={animeObject.synopsis}\r\n                    episodes={animeObject.episodes}\r\n                    animeUrl={animeObject.url}\r\n                    score={animeObject.score}\r\n                    type={animeObject.type}\r\n                    rated={animeObject.rated}\r\n                />)\r\n            );\r\n\r\n            \r\n        }\r\n\r\n        fetchData();\r\n        setCardsDisplayed([]);\r\n\r\n\r\n\r\n        //console.log(results.map(animeObject => <Card key = {animeObject.mal_id} cardTitle = {animeObject.title} img = {animeObject.image_url} />));\r\n        //setCardsDisplayed(results.map(animeObject => <Card key = {animeObject.mal_id} cardTitle = {animeObject.title} img = {animeObject.image_url} />));\r\n\r\n    }, [animeName, urli]);\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Text path=\"/text\" type=\"resultText\" value={`Search results for ${animeName}`} />\r\n            <CardGrid path=\"/\" >\r\n\r\n                {\r\n                    arrayOfCards\r\n                }\r\n\r\n\r\n            </CardGrid>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Cards;","import React from \"react\";\r\n\r\nimport Details from \"./Details\";\r\n\r\nimport Cards from \"./Cards\";\r\nimport { Router } from \"@reach/router\";\r\n\r\n\r\n\r\nfunction Main() {\r\n    \r\n    \r\n    return (\r\n\r\n        <main>\r\n            <Router>\r\n                <Cards path = \"/\"/>\r\n                <Details path = {`/details/:id`}/>\r\n            </Router>\r\n        </main>\r\n    );\r\n\r\n}\r\nexport default Main;","import React,{useState} from 'react';\r\nimport Header from \"./../UI/Organisms/Header\";\r\nimport Main from \"./../UI/Organisms/Main\";\r\nimport Footer from \"./../UI/Organisms/Footer\";\r\nimport './App.css';\r\nimport ThemeContext from \"./../../AnimeContext\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const animeHook = useState(\"\");\r\n  return (\r\n    <ThemeContext.Provider value = {animeHook} >\r\n      <div className=\"gridWrapper\">\r\n        <Header />\r\n        <Main />\r\n        \r\n        \r\n      </div>\r\n      </ThemeContext.Provider>\r\n \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/templates/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}